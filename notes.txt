*make sure you save all the files before running in ther terminal! 

*res.send("text") calls text or information you put in

*res.render("file") calls HTML templates (always needs a views directory)

*Starting the Server in c9 (PORT/IP must be capitalized!!!)*
app.listen(process.env.PORT, process.env.IP, function(){
   console.log("Server is listening!!!");
});

*EJS Tags
<%= %> - Means return value is added to HTML tag (one value per tag)
<% %> - this is a logic tag for IF Statements AROUND EVERY LINE OF JAVASCRIPT
***HTML styling must be done outside of those tags***

*find the public folder- IN APP.JS FILE
app.use(express.static("public"));

*tell Express you use ejs files (just need file names in path)
app.set("view engine", "ejs");

*Partials in views directory (templates)
<% include partials/header %> <% include partials/footer %>

*post routes best option to add information
app.post("/addfriend", function(req, res){
    var newFriend = req.body.newfriend; (collects the name of new friend from form)
    friends.push(newFriend);            (adds newFriend to end of friends array)
    res.redirect("/friends");           (puts you back to friends page to see new friend)
    
*API data comes as a string- break it down like this:
    var parsedData = JSON.parse(body);          ***Breaks the data into objects***
    console.log(parsedData["query"]["results"]["channel"]["astronomy"]["sunset"]);  ***Shows going into each layer from layer above***

*API info    
app.get("/results", function(req,res){                  ***direct the path***
    var query = req.query.search                        ***get Search from ejs page***
    var url = "http://www.omdbapi.com/?s=" + query      ***create the dynamic search with API URL + search term from form***
    request(url, function(error,response,body){         ***tell it what to do with request***
       if(!error && response.statusCode == 200){        ***if no error, and status code is good move to parsing***
           var data = JSON.parse(body);                 ***set the parsed data as a variable to use in ejs***
           res.render("results", {data: data});         ***take the parsed data, define the object for the ejs file***
       } 
    });
});

*Command to start MongoDB
$ ./mongod

*** For embedded relations in DB (one to many), define the many item first, then build the schema for the one with the array of many
